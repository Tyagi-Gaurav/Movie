plugins {
    id 'org.springframework.boot' version '2.5.5'
    id 'jacoco'
    id 'com.github.spotbugs' version '4.7.8'
    id 'pmd'
}

ext {
    springBootVersion = '2.5.5'
    springVersion = '5.3.11'
    commonsLang3Version = '3.12.0'
    commonsTextVersion = '1.9'
    slf4jVersion = '2.0.0-alpha5'
    jacksonVersion = '2.13.0'
    jsonWebTokenVersion = '0.11.2'
    embeddedRedisVersion = '0.7.3'
    mysqlVersion = '8.0.25'
    c3p0Version = '0.9.5.5'
    liquibaseVersion = '4.5.0'
    immutablesVersion = '2.8.8'
    guavaVersion = '31.0.1-jre'
    metricsInterceptor = '1.7.5'
    junitVersion = '5.8.1'
    assertJVersion = '3.21.0'
    h2DbVersion = '1.4.200'
    testContainerVersion = '1.16.0'
    mockitoVersion = '4.0.0'
    reactorVersion = '3.4.11'
    grpcVersion = '1.41.0'
    springOAuthVersion = '2.5.5'
    springWebFluxSecurityVersion = '5.0.0.M5'
}

repositories {
    mavenCentral()
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

sourceSets {
    integration {
        java.srcDir "$projectDir/src/integration/java"
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += output + compileClasspath
    }
    grpcIntegration {
        java.srcDir "$projectDir/src/grpcIntegration/java"
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += output + compileClasspath
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testImplementation

    grpcIntegrationImplementation.extendsFrom testImplementation
    grpcIntegrationRuntime.extendsFrom testImplementation
}

jacoco {
    toolVersion = "0.8.6"
}

bootJar {
    mainClass = 'com.gt.scr.movie.Application'
}

processResources {
    with copySpec {
        from 'src/main/resources'
        include '**/application*.yml'
        include '**/*.properties'
    }

    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

dependencies {
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation project(":grpcService")
    implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}") {
        exclude group: "ch.qos.logback"
    }
    implementation "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-validation:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}"
//    implementation "org.springframework.security:spring-security-webflux:${springWebFluxSecurityVersion}"
    implementation("org.springframework.boot:spring-boot-starter-data-redis:${springBootVersion}") {
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    implementation "org.springframework.boot:spring-boot-starter-oauth2-client:${springBootVersion}"
    implementation "org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:${springOAuthVersion}"
    implementation "org.springframework:spring-jdbc:${springVersion}"
    implementation "org.springframework:spring-core:${springVersion}"
    implementation "org.apache.commons:commons-lang3:${commonsLang3Version}"
    implementation "org.apache.commons:commons-text:${commonsTextVersion}"
    implementation "org.slf4j:slf4j-log4j12:${slf4jVersion}"

    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"

    implementation "io.jsonwebtoken:jjwt-api:${jsonWebTokenVersion}"
    implementation "io.jsonwebtoken:jjwt-impl:${jsonWebTokenVersion}"
    implementation "io.jsonwebtoken:jjwt-jackson:${jsonWebTokenVersion}"
    implementation("it.ozimov:embedded-redis:${embeddedRedisVersion}") {
        exclude group: "org.slf4j", module: "slf4j-simple"
    }

    implementation "mysql:mysql-connector-java:${mysqlVersion}"
    implementation "com.mchange:c3p0:${c3p0Version}"
    implementation "org.liquibase:liquibase-core:${liquibaseVersion}"

    //Immutables
    implementation "org.immutables:value-annotations:${immutablesVersion}"
    implementation "org.immutables:value:${immutablesVersion}"
    implementation "org.immutables:builder:${immutablesVersion}"
    implementation "org.immutables:serial:${immutablesVersion}"
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "io.micrometer:micrometer-core:${metricsInterceptor}"
    annotationProcessor "org.immutables:value:${immutablesVersion}"

    testImplementation "io.projectreactor:reactor-test:$reactorVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    testImplementation "org.springframework.boot:spring-boot-test-autoconfigure:${springBootVersion}"
    testImplementation "org.springframework:spring-test:${springVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.assertj:assertj-core:${assertJVersion}"
    testImplementation "com.h2database:h2:${h2DbVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testContainerVersion}"
    testImplementation "org.testcontainers:mysql:${testContainerVersion}"
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.11.0'
}

scmVersion {
    tag { prefix = project.name + "-" }
    checks {
        uncommittedChanges = true
        snapshotDependencies = true
        aheadOfRemote = false
    }
    useHighestVersion true
    versionIncrementer 'incrementMinor'

    hooks {
        pre 'fileUpdate', [file: 'README.MD', pattern: { v, p -> /(version.) $v/ }, replacement: { v, p -> "\$1 $v" }]
        pre 'commit'
    }
}

project.version = "DEV"

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        html.destination layout.buildDirectory.dir('jacocoHtml').get().asFile
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/gt/scr/movie/grpc_resource/**/*.class",
                    "com/gt/scr/movie/Application.class",
                    "com/gt/scr/movie/Grace**.class",
                    "com/gt/scr/movie/config/**/*.class",
                    "com/gt/scr/movie/security/WebSecurityConfig.class"
            ])
        }))
    }

    executionData.from = files('build/jacoco/test.exec')
}

spotbugs {
    toolVersion = '4.2.3'
    ignoreFailures = false
    excludeFilter = file("gradle/spotbugs/exclusions.xml")
}

spotbugsMain {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugsTest {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/test/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugsIntegration {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/integration/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugsGrpcIntegration {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/grpcIntegration/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

pmd {
    consoleOutput = true
    toolVersion = "6.37.0"
    rulesMinimumPriority = 2
    ruleSets = ["category/java/errorprone.xml", "category/java/bestpractices.xml"]
    reportsDir = layout.buildDirectory.dir('pmd').get().asFile
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath += sourceSets.integration.runtimeClasspath

    useJUnitPlatform()

    reports {
        html.enabled true
        junitXml.enabled = true
    }
    shouldRunAfter test
}

tasks.register('grpcIntegrationTest', Test) {
    description = 'Runs GRPC integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.grpcIntegration.output.classesDirs
    classpath += sourceSets.grpcIntegration.runtimeClasspath

    useJUnitPlatform()

    reports {
        html.enabled true
        junitXml.enabled = true
    }
    shouldRunAfter test
}

check.dependsOn(integrationTest, grpcIntegrationTest)