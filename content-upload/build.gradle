plugins {
    id 'org.springframework.boot' version '2.7.2'
    id 'jacoco'
    id 'com.github.spotbugs' version '5.0.9'
    id 'pmd'
    id "org.gradle.test-retry" version "1.4.0"
}

ext {
    springBootVersion = '2.7.2'
    springCloudVersion = '3.1.3'
    springVersion = '5.3.22'
    commonsLang3Version = '3.12.0'
    commonsTextVersion = '1.9'
    slf4jVersion = '2.0.0-alpha7'
    jacksonVersion = '2.13.3'
    jsonWebTokenVersion = '0.11.5'
    mysqlVersion = '8.0.30'
    c3p0Version = '0.9.5.5'
    liquibaseVersion = '4.13.0'
    guavaVersion = '31.1-jre'
    metricsInterceptor = '1.9.2'
    junitVersion = '5.8.2'
    assertJVersion = '3.23.1'
    h2DbVersion = '2.1.214'
    testContainerVersion = '1.17.3'
    mockitoVersion = '4.6.1'
    reactorVersion = '3.4.21'
    springWebFluxSecurityVersion = '5.0.0.M5'
    wiremockVersion = '2.33.2'
    springDocOpenApiVersion = '1.6.9'
}

repositories {
    mavenCentral()
}

idea {
    module {
        sourceDirs += compileJava.options.annotationProcessorGeneratedSourcesDirectory
        generatedSourceDirs += compileJava.options.annotationProcessorGeneratedSourcesDirectory
        testSourceDirs += compileTestJava.options.annotationProcessorGeneratedSourcesDirectory
        generatedSourceDirs += compileTestJava.options.annotationProcessorGeneratedSourcesDirectory
    }
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

sourceSets {
    integration {
        java.srcDir "$projectDir/src/integration/java"
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += output + compileClasspath
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testImplementation

    grpcIntegrationImplementation.extendsFrom testImplementation
    grpcIntegrationRuntime.extendsFrom testImplementation
}

jacoco {
    toolVersion = "0.8.7"
}

bootJar {
    mainClass = 'com.gt.scr.movie.Application'
}

processResources {
    with copySpec {
        from 'src/main/resources'
        include '**/application*.yml'
        include '**/*.properties'
    }

    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

dependencies {
    implementation project(":resilience")
    implementation project(":common")
    implementation project(":spring-common")
    implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}") {
        exclude group: "ch.qos.logback"
    }
    implementation "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-validation:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}"

    implementation "org.springframework:spring-jdbc:${springVersion}"
    implementation "org.springframework:spring-core:${springVersion}"
    implementation "org.apache.commons:commons-lang3:${commonsLang3Version}"
    implementation "org.apache.commons:commons-text:${commonsTextVersion}"
    implementation "org.slf4j:slf4j-log4j12:${slf4jVersion}"

    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"

    implementation "io.jsonwebtoken:jjwt-api:${jsonWebTokenVersion}"
    implementation "io.jsonwebtoken:jjwt-impl:${jsonWebTokenVersion}"
    implementation "io.jsonwebtoken:jjwt-jackson:${jsonWebTokenVersion}"

    implementation "mysql:mysql-connector-java:${mysqlVersion}"
    implementation "com.mchange:c3p0:${c3p0Version}"
    implementation "org.liquibase:liquibase-core:${liquibaseVersion}"

    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "io.micrometer:micrometer-core:${metricsInterceptor}"
    implementation "io.projectreactor:reactor-core:$reactorVersion"
    implementation "org.springdoc:springdoc-openapi-webflux-ui:$springDocOpenApiVersion"

    testImplementation "io.projectreactor:reactor-test:$reactorVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    testImplementation "org.springframework.boot:spring-boot-test-autoconfigure:${springBootVersion}"
    testImplementation "org.springframework:spring-test:${springVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.assertj:assertj-core:${assertJVersion}"
    testImplementation "com.h2database:h2:${h2DbVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testContainerVersion}"
    testImplementation "org.testcontainers:mysql:${testContainerVersion}"
    testImplementation "com.github.tomakehurst:wiremock-jre8:${wiremockVersion}"
    testImplementation "org.springframework.cloud:spring-cloud-contract-wiremock:${springCloudVersion}"

    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'
}

scmVersion {
    tag { prefix = project.name + "-" }
    checks {
        uncommittedChanges = true
        snapshotDependencies = true
        aheadOfRemote = false
    }
    useHighestVersion true
    versionIncrementer 'incrementMinor'

    hooks {
        pre 'fileUpdate', [file: 'README.MD', pattern: { v, p -> /(version.) $v/ }, replacement: { v, p -> "\$1 $v" }]
        pre 'commit'
    }
}

project.version = "DEV"

test {
    retry {
        maxRetries = 2
        maxFailures = 5
    }

    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        html.destination layout.buildDirectory.dir('jacocoHtml').get().asFile
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/gt/scr/movie/Application.class",
                    "com/gt/scr/movie/Grace**.class",
                    "com/gt/scr/movie/config/**/*.class",
                    "com/gt/scr/movie/security/WebSecurityConfig.class",
                    "com/gt/scr/movie/resource/domain/ByteStreamUploadDTO.class",
                    "com/gt/scr/movie/service/domain/MovieStream.class"
            ])
        }))
    }

    executionData.from = files('build/jacoco/test.exec','build/jacoco/integrationTest.exec')
}

spotbugs {
    ignoreFailures = false
    excludeFilter = file("gradle/spotbugs/exclusions.xml")
}

spotbugsMain {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugsTest {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/test/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugsIntegration {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/integration/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

pmd {
    consoleOutput = true
    toolVersion = "6.37.0"
    rulesMinimumPriority = 2
    ruleSetFiles = files("${projectDir}/gradle/pmd/pmd-rules.xml")
    reportsDir = layout.buildDirectory.dir('pmd').get().asFile
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath += sourceSets.integration.runtimeClasspath

    useJUnitPlatform()

    retry {
        maxRetries = 2
        maxFailures = 5
    }

    reports {
        html.enabled true
        junitXml.enabled = true
    }
    shouldRunAfter test
    finalizedBy jacocoTestReport
}

check.dependsOn(integrationTest)