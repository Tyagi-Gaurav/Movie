plugins {
    id 'io.vertx.vertx-plugin' version '1.3.0'
    id "com.github.johnrengelman.shadow" version "7.0.0"
    id 'jacoco'
    id 'com.github.spotbugs' version '4.7.10'
    id 'pmd'
    id "org.sonarqube" version "3.3"
}

repositories {
    mavenCentral()
}

vertx {
    mainVerticle = "com.gt.scr.user.ConfigVerticle"
    vertxVersion = '4.2.3'
}

ext {
    springBootVersion = '2.6.1'
    springVersion = '5.3.13'
    commonsLang3Version = '3.12.0'
    commonsTextVersion = '1.9'
    slf4jVersion = '2.0.0-alpha5'
    jacksonVersion = '2.13.0'
    jsonWebTokenVersion = '0.11.2'
    mysqlVersion = '8.0.27'
    c3p0Version = '0.9.5.5'
    liquibaseVersion = '4.6.1'
    guavaVersion = '31.0.1-jre'
    metricsInterceptor = '1.8.0'
    junitVersion = '5.8.1'
    assertJVersion = '3.21.0'
    h2DbVersion = '1.4.200'
    testContainerVersion = '1.16.2'
    mockitoVersion = '4.0.0'
    reactorVersion = '3.4.12'
    vertxVersion = '4.2.4'
    micronautVersion = '3.3.0'
    postgresVersion = '42.3.1'
    embeddedPostgresVersion = '1.0.0.RC2'
    bouncyCastleVersion = '1.70'
    scramVersion = '2.1'
    validationApiVersion = '2.0.1.Final'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

sourceSets {
    integration {
        java.srcDir "$projectDir/src/integration/java"
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += output + compileClasspath
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

jacoco {
    toolVersion = "0.8.6"
}

processResources {
    with copySpec {
        from 'src/main/resources'
        include '**/application*.yml'
        include '**/*.properties'
    }

    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testImplementation
}

dependencies {
    implementation project(":common")
    implementation "io.vertx:vertx-core:${vertxVersion}"
    implementation "io.vertx:vertx-web:${vertxVersion}"
    implementation "io.vertx:vertx-auth-jwt:${vertxVersion}"
    implementation "io.vertx:vertx-web-validation:${vertxVersion}"
    implementation "io.vertx:vertx-config:${vertxVersion}"
    implementation "io.vertx:vertx-pg-client:${vertxVersion}"
    implementation "io.vertx:vertx-auth-jwt:${vertxVersion}"
    implementation "io.vertx:vertx-health-check:${vertxVersion}"
    implementation "io.micronaut:micronaut-inject:${micronautVersion}"
    implementation "io.micronaut:micronaut-inject-java:${micronautVersion}"
    annotationProcessor "io.micronaut:micronaut-inject-java:${micronautVersion}"
    implementation "org.postgresql:postgresql:${postgresVersion}"
    implementation "org.bouncycastle:bcprov-jdk15on:${bouncyCastleVersion}"
    implementation "com.ongres.scram:common:${scramVersion}"
    implementation "com.ongres.scram:client:${scramVersion}"
    implementation "javax.validation:validation-api:${validationApiVersion}"

    implementation "org.apache.commons:commons-lang3:${commonsLang3Version}"
    implementation "org.apache.commons:commons-text:${commonsTextVersion}"
    implementation "org.slf4j:slf4j-log4j12:${slf4jVersion}"

    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"

    implementation "io.jsonwebtoken:jjwt-api:${jsonWebTokenVersion}"
    implementation "io.jsonwebtoken:jjwt-impl:${jsonWebTokenVersion}"
    implementation "io.jsonwebtoken:jjwt-jackson:${jsonWebTokenVersion}"

    implementation "mysql:mysql-connector-java:${mysqlVersion}"
    implementation "com.mchange:c3p0:${c3p0Version}"
    implementation "org.liquibase:liquibase-core:${liquibaseVersion}"

    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "io.micrometer:micrometer-core:${metricsInterceptor}"

    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    testImplementation "org.springframework.boot:spring-boot-test-autoconfigure:${springBootVersion}"
    testImplementation "org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}"
    testImplementation "org.springframework:spring-test:${springVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.assertj:assertj-core:${assertJVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testContainerVersion}"
    testImplementation "org.testcontainers:mysql:${testContainerVersion}"
    testImplementation "io.vertx:vertx-junit5:${vertxVersion}"
    testImplementation "com.opentable.components:otj-pg-embedded:${embeddedPostgresVersion}"
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.11.0'
}

pmd {
    consoleOutput = true
    toolVersion = "6.37.0"
    rulesMinimumPriority = 2
    ruleSetFiles = files("${projectDir}/gradle/pmd/pmd-rules.xml")
    reportsDir = layout.buildDirectory.dir('pmd').get().asFile
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        html.destination layout.buildDirectory.dir('jacocoHtml').get().asFile
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/gt/scr/user/Application.class",
                    "com/gt/scr/user/config/**/*.class",
                    "com/gt/scr/user/ConfigVerticle.class",
                    "com/gt/scr/user/resource/domain/*.class"
            ])
        }))
    }

    executionData.from = files('build/jacoco/test.exec', 'build/jacoco/integrationTest.exec')
}

spotbugs {
    toolVersion = '4.2.3'
    ignoreFailures = false
    excludeFilter = file("gradle/spotbugs/exclusions.xml")
}

spotbugsMain {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugsTest {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/test/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugsIntegration {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/integration/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath += sourceSets.integration.runtimeClasspath

    useJUnitPlatform()

    reports {
        html.enabled true
        junitXml.enabled = true
    }
    shouldRunAfter test
    finalizedBy jacocoTestReport
}


check.dependsOn(integrationTest)